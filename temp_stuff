// From:
https://stackoverflow.com/questions/21846965/set-wireless-channel-using-netlink-api
// aircrack-ng: src/osdep/linux.c

static int ieee80211_channel_to_frequency(int chan){
    if (chan < 14)
        return 2407 + chan * 5;

    if (chan == 14)
        return 2484;

    /* FIXME: dot11ChannelStartingFactor (802.11-2007 17.3.8.3.2) */
    return (chan + 1000) * 5;
}

static int linux_set_channel_nl80211(struct wif *wi, int channel)
{
    struct priv_linux *dev = wi_priv(wi);
    char s[32];
    int pid, status, unused;

    unsigned int devid;
    struct nl_msg *msg;
    unsigned int freq;
    unsigned int htval = NL80211_CHAN_NO_HT;
    memset( s, 0, sizeof( s ) );

// Use libnl:
    chan=channel;

/* if_nametoindex is defined in net/if.h but that conflicts with linux/if.h */
// extern unsigned int if_nametoindex(const char *__ifname);
// (appears to be a built-in function, esp. if version supports nl80211)

    devid=if_nametoindex(wi->wi_interface);
    freq=ieee80211_channel_to_frequency(channel);
// Put into base class:
    msg=nlmsg_alloc();
    if (!msg) {
        fprintf(stderr, "failed to allocate netlink message\n");
        return 2;
    }
// Here is the msg header for Get Interfaces:
// genlmsg_put(msg, 0, 0, wifi.nl80211_id, 0,
//             NLM_F_DUMP, NL80211_CMD_GET_INTERFACE, 0);
// There are two callbacks for this:
//    static int finish_handler(struct nl_msg *msg, void *arg)
// and:
//    static int list_interface_handler(struct nl_msg *msg, void *arg)
// See: https://github.com/yurovsky/utils/blob/master/nl-genl/list-80211.c

    genlmsg_put(msg, 0, 0, genl_family_get_id(state.nl80211), 0,
            0, NL80211_CMD_SET_WIPHY, 0);
// Tell base class to add:
// devid, freq, htval are all type 'unsigned int':
    NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, devid);
    NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
    NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_CHANNEL_TYPE, htval);

    nl_send_auto_complete(state.nl_sock,msg);
// Base class will free, no message re-use!
    nlmsg_free(msg);

    dev->channel = channel;

    return( 0 );
 
}


See:
https://github.com/Robpol86/libnl/blob/master/example_c/show_wifi_interface.c
example of get info (one interface and ALL interfaces)

====================================================================
ADD INTERFACE
See:
https://raw.githubusercontent.com/dhalperi/lorcon-old/master/nl80211_control.c
================================================================
/*
    This file is part of lorcon

    lorcon is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    lorcon is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with lorcon; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Copyright (c) 2005 dragorn and Joshua Wright
*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "tx80211.h"

#ifdef SYS_LINUX

#ifdef HAVE_LINUX_NETLINK
#include <sys/types.h>
#include <asm/types.h>
#include <netlink/genl/genl.h>
#include <netlink/genl/family.h>
#include <netlink/genl/ctrl.h>
#include <netlink/msg.h>
#include <netlink/attr.h>
#include <linux/nl80211.h>
#include <net/if.h>
#endif

int mac80211_createvap(const char *interface, const char *newinterface, char *errstr) {
#ifndef HAVE_LINUX_NETLINK
	snprintf(errstr, TX80211_STATUS_MAX, "Lorcon was not compiled with netlink/mac80211 "
			 "support, check the output of ./configure for why");
	return -1;
#else

	struct nl_handle *nl_handle;
	struct nl_cache *nl_cache;
	struct genl_family *nl80211;
	struct nl_msg *msg;

	if (if_nametoindex(newinterface) > 0) 
		return 1;

	if ((nl_handle = nl_handle_alloc()) == NULL) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "allocate nlhandle");
		return -1;
	}

	if (genl_connect(nl_handle)) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "connect to generic netlink");
		nl_handle_destroy(nl_handle);
		return -1;
	}

	if ((nl_cache = genl_ctrl_alloc_cache(nl_handle)) == NULL) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "allocate generic netlink cache");
		nl_handle_destroy(nl_handle);
		return -1;
	}

	if ((nl80211 = genl_ctrl_search_by_name(nl_cache, "nl80211")) == NULL) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "find nl80211 controls, kernel may be too old");
		nl_handle_destroy(nl_handle);
		return -1;
	}

	if ((msg = nlmsg_alloc()) == NULL) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "allocate message");
		nl_handle_destroy(nl_handle);
		return -1;
	}

	genlmsg_put(msg, 0, 0, genl_family_get_id(nl80211), 0, 0, 
				NL80211_CMD_NEW_INTERFACE, 0);
	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, if_nametoindex(interface));
	NLA_PUT_STRING(msg, NL80211_ATTR_IFNAME, newinterface);
	NLA_PUT_U32(msg, NL80211_ATTR_IFTYPE, NL80211_IFTYPE_MONITOR);

	if (nl_send_auto_complete(nl_handle, msg) < 0 || nl_wait_for_ack(nl_handle) < 0) {
nla_put_failure:
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() failed to "
				 "create interface '%s'", newinterface);
		nlmsg_free(msg);
		nl_handle_destroy(nl_handle);
		return -1;
	}

	nlmsg_free(msg);
	nl_handle_destroy(nl_handle);

	if (if_nametoindex(newinterface) <= 0) {
		snprintf(errstr, TX80211_STATUS_MAX, "mac80211_createvap() thought we "
				 "made a vap, but it wasn't there when we looked");
		return -1;
	}

	return 0;
#endif
}

#endif /* linux */


================================================================
Also see:
http://vlkan.com/wapi/wireless_8c_source.html
see line 982. Also delete interface.
uses "nl_cb_err(cb, NL_CB_CUSTOM, nl80211_err_handler, &ret);"
for err handler

================================================================
================================================================
